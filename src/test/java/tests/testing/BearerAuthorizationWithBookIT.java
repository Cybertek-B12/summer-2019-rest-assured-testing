package com.automation.tests.day8;


import com.automation.pojos.Country;
import com.automation.pojos.Room;
import org.junit.jupiter.api.BeforeAll;

import com.automation.utilities.ConfigurationReader;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.*;

import static io.restassured.RestAssured.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.hamcrest.Matchers.*;

/**
 *
 * Bearer Authentication
 * Bearer authentication (also called token authentication) is an HTTP authentication scheme
 * that involves security tokens called bearer tokens.
 * The name “Bearer authentication” can be understood as “give access to the bearer of this token.”
 * The bearer token is a cryptic string, usually generated by the server in response to a login request.
 *
 * The client must send this token in the Authorization header when making requests to protected resources:
 * Authorization: Bearer <token>
 *
 * The Bearer authentication scheme was originally created as part of OAuth 2.0 in RFC 6750,
 * but is sometimes also used on its own. Similarly to Basic authentication,
 * Bearer authentication should only be used over HTTPS (SSL).
 *
 */
public class BearerAuthorizationWithBookIT {
    //    API doc https://cybertek-reservation-api-docs.herokuapp.com/
//    API https://cybertek-reservation-api-qa.herokuapp.com
    @BeforeAll
    public static void setup() {
        baseURI = ConfigurationReader.getProperty("bookit.uri");
    }

    @Test
    @DisplayName("Get rooms without authentication and verify status code")
    public void test1_0() {
        Response response = given().
                when().
                get("/api").prettyPeek();


        assertEquals(422, response.statusCode());
    }

    @Test
    @DisplayName("Get list or rooms and verify response code is 200")
    public void test1_1() {
        Response response = given().
                header("Authorization", sign()).and().
                when().
                get("/api/rooms");


        assertEquals(200, response.statusCode());
        List<Map<String, ?>> rooms = response.jsonPath().getList("");

        System.out.println(rooms);
    }

    @Test
    @DisplayName("Get list or rooms as POJO and verify response code is 200")
    public void test1_2() {
        Response response = given().
                header("Authorization", sign()).and().
                when().
                get("/api/rooms");


        assertEquals(200, response.statusCode());
        List<Room> rooms = response.jsonPath().getList("", Room.class);

       for (Room room: rooms){
           System.out.println(room);
       }
    }

    @Test
    @DisplayName("Get list or teams and verify response code is 200")
    public void test2() {
        Response response = given().
                header("Authorization", sign()).and().
                when().
                get("/api/teams");


        assertEquals(200, response.statusCode());
        List<Map<String, ?>> teams = response.jsonPath().getList("");

        System.out.println(teams);
    }

    @Test
    @DisplayName("Get list of teams in b12")
    public void test3() {
        Response response = given().
                header("Authorization", sign()).
                pathParam("batch-number", 12).
                when().
                get("/api/batches/{batch-number}").prettyPeek();


        assertEquals(200, response.statusCode());

        List<Map<String, ?>> batch = response.jsonPath().getList("teams");

        System.out.println(batch);
    }

    /**
     * Given authorization for team leader
     * And user specifies following query parameters
     *  |first-name|last-name|email                    |password|role               |campus-location|batch-number|team-name|
     *  |Marcus    |Portman  |marcus@cybertekschool.com|1234    |student-team-member|VA             |12          |Devs     |
     *  When user makes POST request to /api/students/student
     *  Then user verifies that status code is 403
     *  And status line contains Forbidden
     */
    @Test
    @DisplayName("Try to post a new student and verify that only teacher can POST")
    public void test4() {
        Response response = given().
                header("Authorization", sign()).
                queryParam("first-name", "Marcus").
                queryParam("last-name", "Portman").
                queryParam("email", "marcus@cybertekschool.com").
                queryParam("password", "1234").
                queryParam("role", "student-team-member").
                queryParam("campus-location", "VA").
                queryParam("batch-number", "12").
                queryParam("team-name", "Devs").
                when().
                post("/api/students/student").prettyPeek();

        response.then().assertThat().
                statusLine(containsString("Forbidden")).
                statusCode(403);


    }

    /**
     * Given authorization for teacher
     * And user specifies following query parameters * enter your info
     *  |first-name|last-name|email                    |password|role               |campus-location|batch-number|team-name|
     *  |Marcus    |Portman  |marcus@cybertekschool.com|1234    |student-team-member|VA             |12          |Devs     |
     *  When user makes POST request to /api/students/student
     *  Then user verifies that status code is 201
     *  And status line contains Created
     */
    @Test
    @DisplayName("Try to post a new student and verify that status code is 201")
    public void test4_2() {
        Response response = given().
                header("Authorization", sign()).
                queryParam("first-name", "Marcus").
                queryParam("last-name", "Portman").
                queryParam("email", "marcus@cybertekschool.com").
                queryParam("password", "1234").
                queryParam("role", "student-team-member").
                queryParam("campus-location", "VA").
                queryParam("batch-number", "12").
                queryParam("team-name", "Devs").
                when().
                post("/api/students/student").prettyPeek();

        response.then().assertThat().
                statusLine(containsString("Created")).
                statusCode(201);


    }

    @Test
    @DisplayName("Delete your student")
    public void test5() {
        int idToDelete = 5378;
        Response response = given().
                header("Authorization", sign()).
                pathParam("id", idToDelete).
                when().
                delete("/api/students/{id}").prettyPeek();


        assertEquals(204, response.statusCode());
    }

    @Test
    @DisplayName("POST new teacher")
    public void test7() {
        Response response = given().
                header("Authorization", sign()).
                queryParam("first-name", "Thom").
                queryParam("last-name", "Liberman").
                queryParam("email", "tom@cybertekschool.com").
                queryParam("password", "1561").
                queryParam("campus-location", "VA").
                when().
                post("/api/teachers/teacher").prettyPeek();
    }


    /**
     * Method to get accessToken for Authentication
     *
     * @return accessToken as string
     */
    private String sign() {
        return given().
                queryParam("email", ConfigurationReader.getProperty("bookit.email")).
                queryParam("password", ConfigurationReader.getProperty("bookit.password")).
                when().
                get("/sign").prettyPeek().
                jsonPath().
                get("accessToken");
    }
}
